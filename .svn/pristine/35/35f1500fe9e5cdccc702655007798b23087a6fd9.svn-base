/*
 * ====================================================================
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 */
package com.floreantpos.util;

import com.floreantpos.config.AppConfig;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.entity.ContentType;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.impl.nio.client.HttpAsyncClients;
import org.apache.http.nio.client.methods.ZeroCopyConsumer;
import org.apache.http.nio.client.methods.ZeroCopyPost;

import java.io.File;
import java.util.concurrent.Future;

/**
 * This example demonstrates how HttpAsyncClient can be used to upload or download files
 * without creating an intermediate content buffer in memory (zero copy file transfer).
 */
public class ReceiptUploader {

    public void start() {

        File folder = new File("receipt");

        for(;;) {

            if (folder.exists()) {

                for (final String f : folder.list()) {

                    if (!f.endsWith("uploaded")) {


                        Runnable r = new Runnable() {
                            @Override
                            public void run() {
                                upload(f);
                            }
                        };

                        Thread t = new Thread(r);
                        t.setPriority(Thread.MIN_PRIORITY);
                        t.start();

                    }

                }
            }


            try {Thread.sleep(10*60*1000);} catch(Exception ignored) {}

        }

    }

    public void upload(String filePath) {

        final File upload = new File(filePath);

        CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();

        try {
            httpclient.start();
            ZeroCopyPost httpost = new ZeroCopyPost(AppConfig.getTmdUrl(), upload,ContentType.create("text/plain"));

            File f = new File("/a.txt");

            ZeroCopyConsumer<File> consumer = new ZeroCopyConsumer<File>(f) {

                @Override
                protected File process(
                        final HttpResponse response,
                        final File file,
                        final ContentType contentType) throws Exception {
                    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                        throw new ClientProtocolException("Upload failed: " + response.getStatusLine());
                    } else {
                        onSucceed(upload);
                    }
                    return file;
                }

            };
            Future<File> future = httpclient.execute(httpost, consumer, null);
            File result = future.get();

            System.out.println("Response file length: " + result.length());

        } catch (Exception e) {

        } finally {
            try{ httpclient.close();} catch (Exception ignored){}
        }


    }

    public void onSucceed(File file) {

        File dest = new File(file.getAbsolutePath()+".uploaded");

        file.renameTo(dest);

    }

}